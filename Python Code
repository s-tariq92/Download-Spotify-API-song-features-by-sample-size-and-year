#CONNECT TO SPOTIFY
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
cid ="type client id here" 
secret = "type secret id here"

client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)



#GET SONG NAMES OF RANDOM SAMPLE
# create empty lists where the results are going to be stored
artist_name = []
track_name = []
popularity = []
track_id = []

#random sample. set sample size, sample rate max 100, and song year
for i in range(0,100,10):  #edit this line to change 100 to your desired number of datapoints, and 10 to sample rate with a max value of 100
    track_results = sp.search(q='year:1990', type='track', limit=10,offset=i) #edit the song release year here to get all songs from a certain year
    for i, t in enumerate(track_results['tracks']['items']):
        artist_name.append(t['artists'][0]['name'])
        track_name.append(t['name'])
        track_id.append(t['id'])
        popularity.append(t['popularity'])

print('number of elements in the track_id list:', len(track_id))

#imports track names
import pandas as pd
df_tracks = pd.DataFrame({'artist_name':artist_name,'track_name':track_name,'track_id':track_id,'popularity':popularity})
print(df_tracks.shape)

#Song name data cleanup
grouped = df_tracks.groupby(['artist_name','track_name'], as_index=True).size()
grouped[grouped > 1].count()
df_tracks.drop_duplicates(subset=['artist_name','track_name'], inplace=True)

# doing the same grouping as before to verify the solution
grouped_after_dropping = df_tracks.groupby(['artist_name','track_name'], as_index=True).size()
grouped_after_dropping[grouped_after_dropping > 1].count()

df_tracks[df_tracks.duplicated(subset=['artist_name','track_name'],keep=False)].count()
df_tracks.shape




#GET SONG METRICS OF THE RANDOM SAMPLE
# empty list, batchsize and the counter for None results
rows = []
batchsize = 50
None_counter = 0

for i in range(0,len(df_tracks['track_id']),batchsize):
    batch = df_tracks['track_id'][i:i+batchsize]
    feature_results = sp.audio_features(batch)
    for i, t in enumerate(feature_results):
        if t == None:
            None_counter = None_counter + 1
        else:
            rows.append(t)
            
print('Number of tracks where no audio features were available:',None_counter)
print('number of elements in the track_id list:', len(rows))


df_audio_features = pd.DataFrame.from_dict(rows,orient='columns')
print("Shape of the dataset:", df_audio_features.shape)
df_audio_features.head()
df_audio_features.info()


#Song metrics data cleanup
columns_to_drop = ['analysis_url','track_href','type','uri']
df_audio_features.drop(columns_to_drop, axis=1,inplace=True)
df_audio_features.rename(columns={'id': 'track_id'}, inplace=True)
df_audio_features.shape




# MERGE BOTH DATAFRAMES
# the 'inner' method will tie the two data sets by the common tracks id
df = pd.merge(df_tracks,df_audio_features,on='track_id',how='inner')
print("Shape of the dataset:", df_audio_features.shape)
df.head()
df.info()



#WRITE TO CSV 
df.to_csv('try1.csv')
 
